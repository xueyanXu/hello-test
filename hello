/ base64转blob
  dataURLtoBlob(dataurl){
    let arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
      bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], { type: mime });
  },

  readBlobAsDataURL(blob, callback){
    var a = new FileReader();
    a.onload = (e) => {
      console.log(e.target.result);
      callback(e.target.result);
    };
    a.readAsDataURL(blob);

  },

  imageToBase64(file, callback, maxLength){

    let img = new Image();
    let reader = new FileReader();
    let maxLen = maxLength ? maxLength : 200;
    reader.onload = function () {
      let url = reader.result;
      img.src = url;
    };

    img.onload = function(){

      //生成比例
      let width = img.width, height = img.height;
      //计算缩放比例
      let rate = 1;
      if (width >= height) {
        if (width > maxLen) {
          rate = maxLen / width;
        }
      } else {
        if (height > maxLen) {
          rate = maxLen / height;
        }
      }

      img.width = width * rate;
      img.height = height * rate;

      let canvas = document.createElement("canvas");
      let ctx = canvas.getContext("2d");
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0, img.width, img.height);
      let base64 = canvas.toDataURL('image/png', 0.9);
      callback(base64, width, height);
    };
    reader.readAsDataURL(file);

  },


  formatTime(timestamp){
    let date = new Date(timestamp * 1000),
    Y = date.getFullYear() + '-',
    M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-',
    D = (date.getDate() < 10 ? '0'+date.getDate() : date.getDate()) + ' ',
    h = (date.getHours() < 10 ? '0'+date.getHours() : date.getHours()) + ':',
    m = date.getMinutes() < 10 ? '0'+date.getMinutes() : date.getMinutes();
    return Y + M + D + h + m;
  },

  paramsSerializer(params, key){
    return params[key].map(_=>`${key}=${_}`).join('&');
  },

  // 正则匹配网址
  regexUrl (str) {
    let html;
    let EMailReg = /\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/gi;
    let EMailArr = [];

    html = str.replace(EMailReg, function (str) {
      EMailArr.push(str);
      return '[email`' + (EMailArr.length - 1) + ']';
    });

    let URLReg = /(((ht|f)tp(s?))\:\/\/)?((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|(www.|[a-zA-Z].)[a-zA-Z0-9\-\.]+\.(com|cn|edu|gov|mil|net|org|biz|info|name|museum|us|ca|uk|me|im))(\:[0-9]+)*(\/($|[a-zA-Z0-9\.\,\;\?\'\\\+&amp;%\$#\=~_\-]+))*/gi;

    html = html.replace(URLReg, function (str, $1) {
      if ($1) {
        return '<a target="_blank" href="' + str + '">' + str + '</a>';
      }
      else {
        return '<a target="_blank" href="//' + str + '">' + str + '</a>';
      }
    });


    for (let i = 0, len = EMailArr.length; i < len; i++) {
      html = html.replace('[email`' + i + ']', '<a href="mailto:' + EMailArr[i] + '">' + EMailArr[i] + '<a>');
    }
    return html;
  }
